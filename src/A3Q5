Question:

What is the best Big O value that any search algorithm can be? Explain.

Answer:

The best case of any search algorithm can be is O(1) since any search algorithm 
can match on the first comparison.  Both Linear Search or Binary Search they can 
return a match for certain values in the array in O(1) time.   

However when considering the best search algorithm for an arbitrary array,
the best Big O value that a search algorithm can be is O(log n) (Logarithmic time),
which is Binary Search.  Binary Search approach is to constantly cut the
array in half that it needs to consider, starting in the middle and every time 
chooses the half of the sorted array that would contain the value being searched 
based on how large the number is relative to the previous one checked. 
By doing this you are essentially getting rid of half the numbers each time that
one doesn't need to check. This is obviously better than sequential search O(n) (linear time),
which starts at the beginning and moves down the array one at a time checking. 
This is why the best Big O value that algorithms can be is O(log n).

