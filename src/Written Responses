A3Q1:   {23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96} 
    Linear search: {23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96}
        is 41 in position 0 -> no -> run for loop again
        is 41 in position 1 -> no -> run for loop again
        is 41 in position 2 -> no -> run for loop again
        is 41 in position 3 -> no -> run for loop again
        is 41 in position 4 -> yes -> return 4

    Binary Search:
        Find the middle of the list -> is it 41 -> no -> is 41 smaller than the middle -> yes -> recursion with the end int being 1 smaller than the middle
        Find the middle of the list -> is it 41 -> no -> is 41 smaller than the middle -> no -> recursion with the start int being 1 larger than the middle
        Find the middle of the list -> is it 41 -> no -> is 41 smaller than the middle -> no -> recursion with the start int being 1 larger than the middle
        Find the middle of the list -> is it 41 -> no -> is 41 smaller than the middle -> yes -> return 4

A3Q2:   {25  30  20  80  40  60}
    Bubble sort: 
        Boolean swapped has not been swapped -> keep Boolean swapped false -> run for loop b/c 0 is smaller than 6 -> is 25 larger than 30 -> no -> don't swap
        i is now 1 -> is 30 larger than 20 -> yes -> temp is now 1 -> place 1 is now 20 -> place 2 is now 30 -> swapped is now true
        i is now 2 -> is 30 larger than 80 -> no -> don't swap
        i is now 3 -> is 80 larger than 40 -> yes -> temp is now 3 -> place 3 is now 40 -> place 4 is now 80 -> swapped is now true
        i is now 4 -> is 80 larger than 60 -> yes -> temp is now 4 -> place 4 is now 60 -> place 5 is now 80 -> swapped is now true
        run for loop again b/c swapped is true -> i is now 0 -> is 25 larger than 20 -> yes -> place 0 is now 20 -> place 1 is now 25 -> swapped is now true
        i is now 1 -> is 25 larger than 30 -> no -> don't swap
        i is now 2 -> is 30 larger than 40 -> no -> don't swap
        i is now 3 -> is 40 larger than 60 -> no -> don't swap
        i is now 4 -> is 60 larger than 80 -> no -> don't swap
        swapped is false -> end program

A3Q3:   {0, 1, 2, 3, 4, 5, 6}    
    The maximum number of comparisons required is 7.
    Binary search:   Looking for 6
        start is not larger than end -> mid is now 3 -> mid does not equal 3 -> 6 is not smaller than mid -> recursion with {4, 5, 6}
        start is not larger than end -> mid is now 5 -> mid does not equal 5 -> 6 is not smaller than mid -> recursion with {6}
        start is not larger than end -> mid is now 6 -> mid equals 6 -> return 6

A3Q4:   For large arrays, in the worst case, is selection sort faster than insertion sort? Explain.
            For large arrays, selection sort would be faster because there is not as 
        many swaps that have to be made. Insertion sort only moves one piece of data at a time, and shuffles it down until 
        it finds an appropriate spot. With selection sort, it goes through each piece of data
        and figures out if it is smaller than the one that is put aside.

A3Q5:   What is the best Big O value that any search algorithm can be? Explain.
            The best Big O value that any search algorithm can be is O(1). This is because this value means that it takes 
        a constant time, no matter how much data there is. O(n) is the second best and means that the time it takes to look 
        up an item is proportional to the amount of data, and they get worse from there.

A3Q7:   Why is this algorithm not as useful as a general sorting algorithm?
            This algorithm is not as useful as a general sorting algorithm because it needs to do much more than a general
        sorting algorithm to work. This algorithm has to create another array, cycle through the numbers in the original
        array, keep track of how many times it sees a number, then loop through the other array and replace the spot in the
        original array with what is in the current spot in the tracker array. 