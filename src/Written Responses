Question 1 ... Let's look for number 41 using LINEAR SEARCH:

0) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
   x
1) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
       x
2) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
            x
3)23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
               x
4) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                   ✔
Question 1 ... Let's look for number 41 using BINARY SEARCH:

0) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                           x
1) 23, 27, 30, 34, 41, 51
            x
2) 34, 41, 51 
       ✔

Question 2 ... Let's sort numbers from least to highest .. USING BUBBLE SORT
0) 25, 30, 20, 80, 40, 60 
    x
1) 25, 30, 20, 80, 40, 60
       x
2) 25, 20, 30, 80, 40, 60 
            x  
3) 25, 20, 30, 80, 40, 60        
                x
4) 25, 20, 30, 40, 80, 60
                    x
5) 25, 20, 30, 40, 60, 80
                        x
6) 20, 25, 30, 40, 60, 80
    x
checks it again to verify everything is in ORDER
7) 20, 25, 30, 40, 60, 80
        x
8) 20, 25, 30, 40, 60, 80
            x
9) 20, 25, 30, 40, 60, 80
                x
10) 20, 25, 30, 40, 60, 80
                     x
11) 20, 25, 30, 40, 60, 80
                         ✔

Question 3 Find the max amount of switches needed for a binary search containing 7 numbers
33, 54, 21, 67, 47, 11, 53

It would take approximately 3 steps, Let's search for 53 :) as an example 

0) 33, 54, 21, 67, 47, 11, 53
               x
1) 47, 11, 53
        x
2) 53         
    ✔
Question 4 Which one is faster ? 
Selection sorting is little faster because insertion is only useful with smaller groups. 
In terms of amount of swaps, Selection is little more efficient.
Selection sorting would take a number and place it where it is suppose to be. 
That number will no longer be scanned for as it is now "sorted".
While insertion would go through every single number within a given series of numbers, 
and since this is a big series of numbers, we would have to go through the numbers we "sorted".

In the worst case scenario, they are both equally 

Question 5
Binary search is the most efficient in terms of Big O, since it would be O(log n), the common name is logarithmic time.
Essentially this method would divide the series of numbers by half every time rather than looking
through every number from beginning to end. When you divide a number, you're essentially cutting down
the amount of numbers you're sorting through. 


 




          