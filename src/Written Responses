Question 1 ... Let's look for number 41 using LINEAR SEARCH:

0) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
   x
1) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
       x
2) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
            x
3)23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
               x
4) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                    ✔
Question 1 ... Let's look for number 41 using BINARY SEARCH:

0) 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                           x
1) 23, 27, 30, 34, 41, 51
            x
2) 34, 41, 51 
       ✔
BINGO! 41 has been found!

Question 2 ... Let's sort numbers from least to highest .. USING BUBBLE SORT
0) 25, 30, 20, 80, 40, 60 
    x
1) 25, 30, 20, 80, 40, 60
       x
2) 25, 20, 30, 80, 40, 60 
            x  
3) 25, 20, 30, 80, 40, 60        
                x
4) 25, 20, 30, 40, 80, 60
                    x
5) 25, 20, 30, 40, 60, 80
                        x
6) 20, 25, 30, 40, 60, 80
    x
checks it again to verify everything is in ORDER
7) 20, 25, 30, 40, 60, 80
        x
8) 20, 25, 30, 40, 60, 80
            x
9) 20, 25, 30, 40, 60, 80
                x
10) 20, 25, 30, 40, 60, 80
                     x
11) 20, 25, 30, 40, 60, 80
                         ✔

Question 3 Find the max amount of switches needed for a binary search containing 7 numbers
33, 54, 21, 67, 47, 11, 53

It would take approximately 3 steps, Let's search for 53 :) as an example 

0) 33, 54, 21, 67, 47, 11, 53
               x
1) 47, 11, 53
        x
2) 53         
   ✔

Brief explanation: it takes 3 steps because binary search would take the last position of an array
which is 7 in this case and add it to the first position which is 1, we then divide it by 2 which gives us
position 4, we look at position 4 which is "67" which isn't "53". Next step we separate and look at left side of numbers. Same thing happens we add 1 and 4 which gives us 5, then divide it by 2 to get 2.5, but during
division, ints always round down meaning it would be 2 instead of 2.5. We look at position 2, which is "11" and isn't "53", so we then separate and look at right side of numbers, since we now have only 2 numbers
left in the array list, we add last position which is 2 and first which is 1 to get 3, then divide it by 2
to get 1.5 which again is 1. At that position we see "53". We have completed binary search.

Question 4: Which one is faster  
In the worst case, selection sort is more efficient in terms of how many swaps have occurred.
Worst case would mean that the list is sorted backwards and since we're comparing efficency, having a bigger
list of numbers results in a larger number of going through individual numbers (SWAPS). Furthermore, in selection
sort, the inner loop is over the unsorted elements, every scan selects one element and moves it to its final 
position. Meanwhile, insertion sort would have its inner loop iterate over the sorted elements which are displaced
until the loop has finally sorted ALL elements within the list.

Question 5:
the best Big O value notation could be is O(log n),
binary search is the most efficient in terms of Big O, since it would be O(log n), the common name is logarithmic time.
Essentially this method would divide the series of numbers by half every time rather than looking
through every number from beginning to end. When you divide a number, you're essentially cutting down
the amount of numbers you're sorting through. 


Question 7:
Generally, this type of algorithm would not be suited for a list of array that would consist 
of strings. That's because strings contain bunch of letters within one slot, having it match
another string would require breaking up the string into letters. Then have those letters matched.
The process itself is possible however, the efficiency isn't the greatest in this case.

As for finding the order of my algorithm, it would be O(n + k(n-x)).

Let's break this down to steps:
Let n represent the elements needed to be sorted and let k represent the tracker containing 100 numbers
and x representing the total sum amount of all spots within tracker that have a number higher than 1 (i.e one spot may have 3 numbers of 54s, x would equal 2)
Going down the method countSort, we first have our tracker array initialized, then we have a for loop involving 
n where the tracker adds to a spot everytime it sees a number. Then we have a for loop that goes through entire elements of k,
within this for loop, there is an if statement that restricts k. Since there is potential of having repeated numbers within
a list, that means there will be less amount of times of passing through the array, for example we have 5 slots of numbers to sort that contain
two 33s, this means that the loop is list condensed down to 4 slots instead, that's why n-x is written this way, we
are subtracting the original list of array (n) with the amount of times there are repeated values within the array (x). 
